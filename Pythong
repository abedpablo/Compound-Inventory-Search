import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from scipy import stats
import matplotlib.colors as mcol
import matplotlib.cm as cm

np.random.seed(12345)

df = pd.DataFrame([np.random.normal(32000,200000,3650), 
                   np.random.normal(43000,100000,3650), 
                   np.random.normal(43500,140000,3650), 
                   np.random.normal(48000,70000,3650)], 
                  index=[1992,1993,1994,1995])

#Calculate basic statistics for bar graph
year_avg = df.mean(axis=1)
year_std = df.std(axis=1)

#Calculate error bars(confidence intervals) for bars with 95% confidence using the formula #
#Z(sub-A)* STD / sqrt(sample-size), where A refers to the confidence level. #
#Python has built-in statistics with T-distribution using stats.t through scipy. Using this we can #
#reference the proper distribution without having to either look up the T-distribution nor the number of observations.#
yerr = stats.t.ppf(1-0.05/2, df.shape[1]-1) * year_std / np.sqrt(df.shape[1])

plt.figure()
y_val = 42000
plt.axhline(y = y_val, color = 'white', alpha = 0.5)


cm1 = mcol.LinearSegmentedColormap.from_list("MyCmapName",["blue", "white", "red"])
cpick = cm.ScalarMappable(cmap=cm1)
cpick.set_array([])
cpick

percentages = []
for graph, yerr in zip(graph, yerr):
    high = graph.get_height() + yerr
    low = graph.get_height() - yerr
    percentage = (high-y_val)/(high-low)
    if percentage>1: percentage = 1
    if percentage<0: percentage=0
    percentages.append(percentage)
percentages

graph = plt.bar(range(df.shape[0]), year_avg, yerr = yerr, color = cpick.to_rgba(percentages))
plt.colorbar(cpick, orientation='horizontal')
plt.xticks(range(df.shape[0]), df.index, alpha = 0.8)

ax = plt.gca()
ax.set_facecolor('#C9C9C9')
ax.set_title('Random Data 1992-1994')

plt.show()
